generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PATIENT
  DOCTOR
  ADMIN
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  password         String
  role             Role
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  profile          Profile?
  // Relations
  patient          Patient?
  doctor           Doctor?
  uploadedMedia    Media[]
  authoredComments Comment[]

  RefreshToken RefreshToken[]
}

model RefreshToken {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  tokenHash  String   // hashed refresh token
  userAgent  String?  // optional: store device/user-agent
  ip         String?  // optional: store request IP
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
}


model Profile {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
  firstName String
  lastName  String
  phone     String?
  avatar    Media?  @relation(fields: [avatarId], references: [id])
  avatarId  String? @unique
  bio       String?
}

model Media {
  id           String     @id @default(uuid())
  url          String
  publicId     String // cloudinary public id
  mimeType     String?
  size         Int?
  uploadedBy   User?      @relation(fields: [uploadedById], references: [id])
  uploadedById String?
  profile      Profile?
  blogPosts    BlogPost[] @relation("BlogImages")
  createdAt    DateTime   @default(now())
}

model Patient {
  id            String         @id @default(uuid())
  userId        String         @unique
  user          User           @relation(fields: [userId], references: [id])
  medicalRecord Json?
  symptoms      Symptom[]
  appointments  Appointment[]
  prescriptions Prescription[]
  createdAt     DateTime       @default(now())
}

model Doctor {
  id                   String         @id @default(uuid())
  userId               String         @unique
  user                 User           @relation(fields: [userId], references: [id])
  specialty            String
  qualification        String?
  bio                  String?
  appointments         Appointment[]
  blogPosts            BlogPost[]
  forwardedPredictions Prediction[]
  prescriptions        Prescription[]
  createdAt            DateTime       @default(now())
}

model Symptom {
  id          String      @id @default(uuid())
  patient     Patient     @relation(fields: [patientId], references: [id])
  patientId   String
  description String
  location    String? // e.g., 'head', 'chest', 'abdomen'
  medications String? // medication already taken (text)
  createdAt   DateTime    @default(now())
  prediction  Prediction?
}

model Prediction {
  id            String   @id @default(uuid())
  symptom       Symptom  @relation(fields: [symptomId], references: [id])
  symptomId     String   @unique
  results       Json // e.g., [{ disease: "Flu", probability: 0.73 }, ...]
  followUps     Json? // questions asked to clarify (if dynamic)
  createdAt     DateTime @default(now())
  forwardedTo   Doctor?  @relation(fields: [forwardedToId], references: [id])
  forwardedToId String?
}

model Appointment {
  id        String    @id @default(uuid())
  patient   Patient   @relation(fields: [patientId], references: [id])
  patientId String
  doctor    Doctor?   @relation(fields: [doctorId], references: [id])
  doctorId  String?
  startTime DateTime
  endTime   DateTime?
  status    String    @default("PENDING") // PENDING, CONFIRMED, CANCELLED, COMPLETED
  reason    String?
  createdAt DateTime  @default(now())
}

model Prescription {
  id          String   @id @default(uuid())
  patient     Patient  @relation(fields: [patientId], references: [id])
  patientId   String
  doctor      Doctor?  @relation(fields: [doctorId], references: [id])
  doctorId    String?
  medications Json // structured medication info
  notes       String?
  createdAt   DateTime @default(now())
}

model BlogPost {
  id        String    @id @default(uuid())
  title     String
  slug      String    @unique
  content   String
  author    Doctor    @relation(fields: [authorId], references: [id])
  authorId  String
  images    Media[]   @relation("BlogImages")
  comments  Comment[]
  likes     Int       @default(0)
  published Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  post      BlogPost @relation(fields: [postId], references: [id])
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime @default(now())
  moderated Boolean  @default(false)
}
